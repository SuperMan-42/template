/* DO NOT EDIT THIS FILE - it is machine generated */
#include <jni.h>
#include <string>
#include <stdlib.h>
#include <android/log.h>
#include "com_subject_ysh_core_HttpService.h"
#include "MD5.h"
/* Header for class com_subject_ysh_core_HttpService */
#define APP_KEY "UJLSI98#@SJK"
#define ENCODE "UTF-8"

#define LOGD(...)  __android_log_print(ANDROID_LOG_DEBUG,"hpw",__VA_ARGS__) // 定义LOGD类型

/**
 * 实现类似stringbuffer的append的方法
 */
JNIEXPORT jobject append(JNIEnv *env, jobject obj, jstring s) {
    jclass StringBufferCls = env->FindClass("java/lang/StringBuffer");
    jmethodID StringBuffer_append = env->GetMethodID(StringBufferCls, "append",
                                                     "(Ljava/lang/String;)Ljava/lang/StringBuffer;");
    obj = env->CallObjectMethod(obj, StringBuffer_append, s);
    return obj;
}

/**
 * 实现类似stringbuffer的toString的方法
 */
JNIEXPORT jstring toString(JNIEnv *env, jobject stringbuffer) {
    jclass StringBufferCls = env->FindClass("java/lang/StringBuffer");
    jmethodID StringBuffer_toString = env->GetMethodID(StringBufferCls, "toString",
                                                       "()Ljava/lang/String;");
    jstring str = (jstring) env->CallObjectMethod(stringbuffer, StringBuffer_toString);
    return str;
}


/**
 * 实现类似stringbuffer的deleteCharAt的方法
 */
JNIEXPORT jobject deleteCharAt(JNIEnv *env, jobject obj, jint index) {
    jclass StringBufferCls = env->FindClass("java/lang/StringBuffer");
    jmethodID StringBuffer_deleteCharAt = env->GetMethodID(StringBufferCls, "deleteCharAt",
                                                           "(I)Ljava/lang/StringBuffer;");
    obj = env->CallObjectMethod(obj, StringBuffer_deleteCharAt, index);
    return obj;
}

/**
 * 实现类似stringbuffer的length()的方法
 */
JNIEXPORT jint sb_length(JNIEnv *env, jobject obj) {
    jclass StringBufferCls = env->FindClass("java/lang/StringBuffer");
    jmethodID StringBuffer_length = env->GetMethodID(StringBufferCls, "length", "()I");
    jint length = env->CallIntMethod(obj, StringBuffer_length);
    return length;
}

/**
 * 获取SessionToken
 */
JNIEXPORT jstring getSessionToken(JNIEnv *env, jobject context) {
//    jclass SessionCls = env->FindClass("com/subject/ysh/core/Session");
//    jmethodID Session_getInstance = env->GetStaticMethodID(SessionCls, "getInstance",
//                                                           "(Landroid/content/Context;)Lcom/subject/ysh/core/Session;");
//    jmethodID Session_getSessionToken = env->GetMethodID(SessionCls, "getSessionToken",
//                                                         "()Ljava/lang/String;");
//
//    jobject session = env->CallStaticObjectMethod(SessionCls, Session_getInstance, context);
//    jstring session_token = (jstring) env->CallObjectMethod(session, Session_getSessionToken);
//    return session_token;
    return NULL;
}

/**
 * 转换为小写
 */
JNIEXPORT jstring toLowerCase(JNIEnv *env, jstring jstr) {
    jclass StringCls = env->FindClass("java/lang/String");
    jmethodID String_toLowerCase = env->GetMethodID(StringCls, "toLowerCase",
                                                    "()Ljava/lang/String;");

    jstr = (jstring) env->CallObjectMethod(jstr, String_toLowerCase);
    return jstr;
}

//char* 转换 jstring
jstring returnjstring(JNIEnv *env, const char *pat) {
    //定义java String类 strClass
    jclass strClass = (env)->FindClass("java/lang/String");
    //获取String(byte[],String)的构造器,用于将本地byte[]数组转换为一个新String
    jmethodID ctorID = (env)->GetMethodID(strClass, "<init>",
                                          "([BLjava/lang/String;)V");
    //建立byte数组
    jbyteArray bytes = (env)->NewByteArray(strlen(pat));
    //将char* 转换为byte数组
    (env)->SetByteArrayRegion(bytes, 0, strlen(pat), (jbyte *) pat);
    // 设置String, 保存语言类型,用于byte数组转换至String时的参数
    jstring encoding = (env)->NewStringUTF(ENCODE);
    //将byte数组转换为java String,并输出
    return (jstring) (env)->NewObject(strClass, ctorID, bytes, encoding);
}

//jstring 转换 string
std::string returnstring(JNIEnv *env, jstring jstr) {
    char *rtn = NULL;
//     获取java下的string类
    jclass clsstring = env->FindClass("java/lang/String");
//     创建一个JNI下的jstring类
    jstring strencode = env->NewStringUTF(ENCODE);
//     获取java下的函数getBytes的ID,参数为函数名称和string类
    jmethodID mid = env->GetMethodID(clsstring, "getBytes",
                                     "(Ljava/lang/String;)[B");
//     调用getBytes函数,参数为string字符串,函数ID和函数的参数类型,返回一个byte数组
    jbyteArray barr = (jbyteArray) env->CallObjectMethod(jstr, mid, strencode);
//     获取返回的Byte数组的长度
    jsize alen = env->GetArrayLength(barr);
//     获取数组元素
    jbyte *ba = env->GetByteArrayElements(barr, JNI_FALSE);
    if (alen > 0) {
//         分配内存
        rtn = (char *) malloc(alen + 1);
//         字符串的拷贝
        memcpy(rtn, ba, alen);
        rtn[alen] = 0;
    }
    env->ReleaseByteArrayElements(barr, ba, 0);
    std::string stemp(rtn);
//    释放指针内存
    free(rtn);
    return stemp;
}

char *jstringTostring(JNIEnv *env, jstring jstr) {
    char *rtn = NULL;
    jclass clsstring = env->FindClass("java/lang/String");
    jstring strencode = env->NewStringUTF("utf-8");
    jmethodID mid = env->GetMethodID(clsstring, "getBytes",
                                     "(Ljava/lang/String;)[B");
    jbyteArray barr = (jbyteArray) env->CallObjectMethod(jstr, mid, strencode);
    jsize alen = env->GetArrayLength(barr);
    jbyte *ba = env->GetByteArrayElements(barr, JNI_FALSE);
    if (alen > 0) {
        rtn = (char *) malloc(alen + 1);
        memcpy(rtn, ba, alen);
        rtn[alen] = 0;
    }
    env->ReleaseByteArrayElements(barr, ba, 0);
    return rtn;
}

/*
 * Class:     com_subject_ysh_core_HttpService
 * Method:    getSign
 * Signature: (Landroid/content/Context;Ljava/util/List;)Ljava/lang/String;
 */
JNIEXPORT jstring JNICALL
Java_com_recorder_app_Jni_getSign(JNIEnv *env, jobject obj, jobject context, jstring content) {
//    //创建StringBuffer
    jclass strBufferCls = env->FindClass("java/lang/StringBuffer");
    jmethodID bufferInitId = env->GetMethodID(strBufferCls, "<init>", "()V");
    jobject strBufferObj = env->NewObject(strBufferCls, bufferInitId);
    jstring spilt = env->NewStringUTF("|");
    append(env, strBufferObj, content);
    //转换小写
    //拼上SESSOIN-TOKEN
    jstring session_token = getSessionToken(env, context);
    if (session_token != NULL) {
        jint utfLength = env->GetStringUTFLength(session_token);
        if (utfLength > 0) {
            append(env, strBufferObj, session_token);
            append(env, strBufferObj, spilt);
        }
    }
    //拼接APP_KEY
    jstring app_key = env->NewStringUTF(APP_KEY);
    append(env, strBufferObj, app_key);
    jstring sign = toString(env, strBufferObj);
//	LOGD("########## sign = %s", jstringTostring(env,sign));
    //计算MD5值
    std::string str(returnstring(env, sign));
    std::string md5_a = md5(str);
    const char *md5_b = md5_a.data();
//	sign = returnjstring(env,md5_b);
//	LOGD("########## sign_md5 = %s", jstringTostring(env,sign));
    return returnjstring(env, md5_b);
}